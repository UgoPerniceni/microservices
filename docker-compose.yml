version: '3.8'

services:
  postgresql:
    image: postgres
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5430:5432

  grafana:
    image: grafana/grafana:7.5.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - 3000:3000
    user: "472"

  prometheus:
    image: prom/prometheus:v2.26.0
    container_name: prometheus
    user: root
    ports:
      - 9090:9090
    volumes:
      - /prometheus-data/prometheus.yml:/etc/prometheus/prometheus.yaml
      - /data/prometheus:/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    networks:
      - microservices
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    networks:
      - microservices
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.5.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:6.3.2
    container_name: kibana
    ports:
      - "5601:5601"

  java:
    container_name: spring-boot
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/app
    depends_on:
      - postgresql
    ports:
    - 4012:4012

volumes:
  data: {}
  postgres_data: {}
  grafana_data: {}
  prometheus_data: {}
  data01:
    driver: local

networks:
  elastic:
    driver: bridge
  microservices:
    driver: bridge
